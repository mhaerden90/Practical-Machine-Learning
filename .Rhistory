cv.lasso <- cv.glmnet(concrete[,-"CompressiveStrength"], concrete$CompressiveStrength, alpha = 1, family = "binomial")
cv.lasso <- cv.glmnet(concrete[,-"CompressiveStrength"], concrete$CompressiveStrength, alpha = 1)
data(vowel.train)
data(vowel.test)
training <- vowel.train
testing <- vowel.test
set.seed(33833)
# random forest predictor algorithm
rfFit <- train(as.factor(y) ~., method = "rf",
data = training)
boostFit <- train(as.factor(y) ~., method = "gbm",
data = training, verbose = FALSE)
testingRF <- predict(rfFit, testing)
testingBoost <- predict(boostFit, testing)
confusionMatrix(testingRF, as.factor(testing$y))
confusionMatrix(testingBoost, as.factor(testing$y))
confusionMatrix(testingRF, testingBoost)
lassoFit <- train(CompressiveStrength ~.,  data = training,
method = "lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
lassoFit <- train(CompressiveStrength ~.,  data = training,
method = "lasso")
lassoFit <- train(CompressiveStrength ~.,  data = training,
method = "lasso")
lassoFit <- train(CompressiveStrength ~.,  data = training,
method = "lasso")
lassofit$finalModel
lassoFit$finalModel
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("C:\Users\Mathijs\Documents\datasciencecoursera\gaData.csv")
dat = read.csv("C:/Users/Mathijs/Documents/datasciencecoursera/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
str(training)
head(training)
bats(tstrain)
mod1 <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
fcast <- forecast(mod1, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
fcast
fcast$lower
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
head(training)
pred_svm <- predict(mod_svm, testing)
mod_svm
mod_svm$coefs
setwd("~/datasciencecoursera/Practical Machine learning/Project")
data <- read.csv("pml-training.csv")
data <- read.csv("pml-training.csv")
head(data)
str(data)
data$amplitude_roll_arm
data <- read.csv("pml-training.csv")
data <- data[,-1:4]
data <- read.csv("pml-training.csv")
data <- data[,-c(1:4)]
names(data)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:4)]
names(data)
data <- read.csv("pml-training.csv")
names(data)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data$yaw_belt
str(data)
lm(data$classe~.)
lm(classe~., data=data)
cor(data$class, yaw_belt)
cor(data$class, data$yaw_belt)
cor(data)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
subset(data, select=colMeans(is.na(tm1)) == 0)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data
str(data)
data$kurtosis_yaw_forearm
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- data[,-data$kurtosis_yaw_forearm]
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- data[,-kurtosis_yaw_forearm]
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -kurtosis_yaw_forearm )
head(data)
str(data)
data$gyros_dumbbell_x
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm )
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm ))
str(data)
data$skewness_yaw_dumbbell
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm, kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt ))
str(data)
data$classe
plot(data$roll_belt)
str(data)
data2 <- data.frame(lapply(subset(data, select= -c(classe)), function(x) as.numeric(as.character(x))))
data2
data$kurtosis_roll_belt
data2$kurtosis_roll_belt
str(data)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm, kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbell ))
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm, kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, skewness_yaw_dumbbell, kurtosis_yaw_dumbbell ))
str(data)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data <- subset(data, select=colMeans(is.na(data)) == 0)
data <- subset(data, select = -c(kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm, kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, skewness_yaw_dumbbell, kurtosis_yaw_dumbbell, amplitude_yaw_dumbbell ))
str(data)
data$min_yaw_belt
library(dplyr)
str(data)
?subset
data$min_yaw_belt
?grep
grep("#DIV/0!", data)
grepl("#DIV/0!", data)
data
dim(data)
grepl("#DIV/0!", data$pitch_belt)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
data[data == ""] <- NA
data[data== "#DIV/0!"] <- NA
data <- subset(data, select=colMeans(is.na(data)) == 0)
str(data)
dim(data)
data$gyros_belt_z
data$roll_arm
training[data == ""] <- NA
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = concrete[ inTrain,]
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
dim(training)
dim(testing)
training[data == ""] <- NA
str(training)
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
str(training)
training$total_accel_arm
library(dplyr)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
mod1 <- train(Classe~., method="rpart", data=training)
names(training)
inTrain = createDataPartition(data$Classe, p = 3/4)[[1]]
library(dplyr)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
inTrain = createDataPartition(data$Classe, p = 3/4)[[1]]
data$classe
data
library(dplyr)
library(caret)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
inTrain = createDataPartition(data$Classe, p = 3/4)[[1]]
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
data$classe
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
mod1 <- train(classe~., method="rpart", data=training)
mod1$finalModel
training[training$roll_belt>=130.5, ]
training[training$roll_belt>=130.5, training$classe ]
training[training$roll_belt>=130.5, ]
test <- training[training$roll_belt>=130.5, ]
training[training$roll_belt>=130.5, names(training) == "classe" ]
mod1$finalModel
mod1 <- train(classe~., method="rf", data=training)
data <- read.csv("pml-training.csv")
data$num_window
str(daa)
names(data)
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
str(training)
?filter
?Filter
Filter(function(u) any(grepl('x|y|z',u)), training)
Filter(function(u) any(grepl('x|y|z',names(u))), training)
Filter(function(u) any(c('wrong','correct') %in% names(u)), training)
names(training)
Filter(function(u) any(c('wrong','correct') %in% colnames(u)), training)
test <- Filter(function(u) any(c('wrong','correct') %in% colnames(u)), training)
test
Filter(function(u) any(c('x','y') %in% colnames(u)), training)
dim(training)
training2 <- training[, which(names(df) %like% c("_x", "_y", "_z"))]
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
training2 <- training[, which(names(df) %like% c("_x"))]
?like
data %like% "2"
?which
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
training2 <- training[, which(names(df) %like% c("_x"))]
training[training == ""] <- NA
training[training== "#DIV/0!"] <- NA
training <- subset(training, select=colMeans(is.na(training)) == 0)
training %>%
select(ends_with("_x"))
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"))
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"))
training
names(training)
training$gyros_arm_x
library(dplyr)
library(caret)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"))
training
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
training
mod1 <- train(classe~., method="rpart", data=training)
mod1$finalModel
?randomForest
mod1 <- train(classe~., method="rf", data=training)
library(randomForest)
mod2 <- randomForest(classe~., data=training)
varImpPlot(mod2)
predict(mod2, testing)
mod2
pred1 <- predict(mod2, testing)
pred1
dim(testing)
dim(pred1)
length(pred1)
confusionMatrix(pred1, testing$classe)
mod2
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training[training=="" | training=="#DIV/0!"] <- NA
training
training[training=="" | training=="#DIV/0!"] <- NA
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count
training <- training %>%
select(na_count < 100)
na_count
class(na_count)
training <- training %>%
select(function(y) sum(length(which(is.na(y)))) <100)
library(dplyr)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
names(training)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
library(dplyr)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
mod2 <- randomForest(classe~., data=training)
?randomforest
?randomForest
mod2$confusion
mod2$err.rate
mod2$confusion
mod2$terms
accuracy(mod2)
confusionMatrix(mod2, training$classe)
confusionMatrix(mod2$predicted, training$classe)
predict(mod2, testing)
prediction <- predict(mod2, testing)
confusionMatrix(prediction, testing$classe)
prediction <- predict(mod2, testing)
confusionMatrix(prediction, testing$classe)$accuracy
confMatrix <- confusionMatrix(prediction, testing$classe)
prediction <- predict(mod2, testing)
confMatrix <- confusionMatrix(prediction, testing$classe)
confMatrix$overall
prediction <- predict(mod2, testing)
confMatrixTesting <- confusionMatrix(prediction, testing$classe)
confMatrixTesting$overall
testData <- read.csv("pml-testing.csv")
testdata
testData
testData <- read.csv("pml-testing.csv")
finalPrediction <- predict(modFit, testData)
library(dplyr)
library(caret)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
modFit <- randomForest(classe~., data=training)
confMatrixTraining <- confusionMatrix(mod2$predicted, training$classe)
confMatrixTraining$overall
testPrediction <- predict(modFit, testing)
confMatrixTesting <- confusionMatrix(prediction, testing$classe)
confMatrixTesting$overall
testData <- read.csv("pml-testing.csv")
finalPrediction <- predict(modFit, testData)
finalPrediction
library(dplyr)
library(caret)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
set.seed(554)
modFit <- randomForest(classe~., data=training)
confMatrixTraining <- confusionMatrix(modFit$predicted, training$classe)
confMatrixTraining$overall
testPrediction <- predict(modFit, testing)
confMatrixTesting <- confusionMatrix(testPrediction, testing$classe)
confMatrixTesting$overall
testData <- read.csv("pml-testing.csv")
finalPrediction <- predict(modFit, testData)
finalPrediction
library(dplyr)
library(caret)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
set.seed(554)
modFit <- randomForest(classe~., data=training)
confMatrixTraining <- confusionMatrix(modFit$predicted, training$classe)
confMatrixTraining$overall
testPrediction <- predict(modFit, testing)
confMatrixTesting <- confusionMatrix(testPrediction, testing$classe)
confMatrixTesting$overall
testData <- read.csv("pml-testing.csv")
finalPrediction <- predict(modFit, testData)
finalPrediction
library(dplyr)
library(caret)
library(randomForest)
data <- read.csv("pml-training.csv")
data <- data[,-c(1:7)]
set.seed(234)
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
training = data[ inTrain,]
testing = data[-inTrain,]
names(training)
training <- training %>%
select(ends_with("_x"), ends_with("_y"), ends_with("_z"), "classe")
set.seed(554)
modFit <- randomForest(classe~., data=training)
confMatrixTraining <- confusionMatrix(modFit$predicted, training$classe)
confMatrixTraining$overall
testPrediction <- predict(modFit, testing)
confMatrixTesting <- confusionMatrix(testPrediction, testing$classe)
confMatrixTesting$overall
testData <- read.csv("pml-testing.csv")
finalPrediction <- predict(modFit, testData)
finalPrediction
